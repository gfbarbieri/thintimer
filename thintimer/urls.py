"""Thintimer URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.urls import path, include
from django.contrib import admin
from django.contrib.auth import views as auth_views
from user_auth import views as ua_views # Import the view from your user_auth app
from main_app import views as m_views # Import the view from your main_app app

from rest_framework.routers import DefaultRouter

"""
Notes on DefaultRouter() from Django REST Framework.

* The DefaultRouter class is a part of Django REST framework's routing system
and is used to automatically generate URLs for API views.

* The variable router will be used to define API endpoints for your Django
application.

* router.register() is used to register API views with the router.
* r'tasks' is the URL prefix or path that will be associated with the registered
views. In this case, it means that the views related to tasks will have URLs
starting with /tasks/.

* m_views.TaskViewSet is the viewset that should handle requests related to 
tasks. Viewsets are a powerful way to manage the logic for API endpoints in
Django REST framework.

* basename='task' specifies a basename for the URLs generated by the router.
This can be useful when reversing URLs in your code.

In summary, the DefaultRouter simplifies the process of defining API endpoints
by automatically generating URLs for your API views. It's a convenient way to
set up RESTful API routing in your Django application without having to manually
define each URL pattern for your views.
"""

# Initialize the DefaultRouter to manage API routes.
router = DefaultRouter()

# Register the 'TaskViewSet' viewset with the router, associating it with the
# 'tasks' URL prefix.
router.register(r'tasks', m_views.TaskViewSet, basename='task')
router.register(r'entries', m_views.EntryViewSet, basename='entry')

# Define URL patterns for the entire application.
urlpatterns = [
    # Define the admin route to the Django admin panel.
    path('admin/', admin.site.urls),

    # Define API endpoints for user authentication.
    path('api/login/', ua_views.user_login, name='user_login'),  # Login endpoint.
    path('api/logout/', ua_views.user_logout, name='user_logout'), # Logout endpoint.
    path('api/signup/', ua_views.user_signup, name='user_signup'), # Signup endpoint.

    # Include the API routes generated by the 'DefaultRouter' for tasks.
    path('api/', include(router.urls)),
    path('api/report/', m_views.generate_report, name='generate_report'),
    path('api/generate_xlsx_report/', m_views.generate_xlsx_report, name='generate_xlsx_report'),

    # Define the routes for settings.
    path('api/update_username/', ua_views.update_username, name='update_username'),
    path('api/update_email/', ua_views.update_email, name='update_email'),
    path('api/reset_password/', ua_views.reset_password, name='reset_password'),
    path('api/delete_account/', ua_views.delete_account, name='delete_account'),

    # Define the default homepage route to the 'project_homepage' view,
    # a custom route for task management, user-facing edit entries
    # page, a user-facing sign-up page, route for the 'homepage_view',
    # user-facing sign-up page.
    path('', ua_views.project_homepage, name='project_homepage'),
    path('signup/', ua_views.signup_page, name='signup_page'),  
    path('home/', m_views.homepage_view, name='home'),
    path('tasks/', m_views.task_management_view, name='task_management'),
    path('edit_entries/', m_views.edit_entries, name='edit_entries'),
    path('timer/', m_views.timer, name='timer'),
    path('run_reports/', m_views.run_reports, name='run_reports'),
    path('settings/', ua_views.settings, name='settings'),

    # Define the routes for password resets.
    path('password_reset/', auth_views.PasswordResetView.as_view(), name='password_reset'),
    path('password_reset/done/', auth_views.PasswordResetDoneView.as_view(), name='password_reset_done'),
    path('reset/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(), name='password_reset_confirm'),
    path('reset/done/', auth_views.PasswordResetCompleteView.as_view(), name='password_reset_complete'),

]